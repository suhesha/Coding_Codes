************************TO ADD 2 NUMBERS*****************************
section .data
msg db "enter a digit 1:" ,10
len equ $- msg
msg2 db "enter the digit 2:" ,10
len2 equ $- msg2
msg1 db "The sum is:" ,10
len1 equ $- msg1
section .bss
num1 resb 2
num2 resb 2
sum resb 1
section .text
global _start
_start:
mov ecx,msg
mov edx,len
mov eax,4
mov ebx,1
int 80h

mov eax,3
mov ebx,0
mov ecx,num1
mov edx,2
int 80h

mov ecx,msg2
mov edx,len2
mov eax,4
mov ebx,1
int 80h

mov eax,3
mov ebx,0
mov ecx,num2
mov edx,2
int 80h

;****addition****
mov eax,[num1]
sub eax,'0'
mov ebx,[num2]
sub ebx,'0'
add eax,ebx
add eax,'0'
mov[sum],eax

mov ecx,msg1
mov edx,len1
mov eax,4
mov ebx,1
int 80h


;display sum
mov ecx,sum
mov edx,1
mov ebx,1
mov eax,4
mov ebx,1
int 80h
mov eax,1
int 80h
**********************************************************************************
section .data
msg db "***  basic mathematical operations ***"
len equ $ -msg
msg1 db 10,13,"sum:"
len1 equ $ -msg1

section .bss
reg resb 1

section .text
global _start
_start:
;display the string msg
mov ecx,msg
mov edx,len
mov ebx,1
mov eax,4
int 80h

;display the string msg1
mov ecx,msg1
mov edx,len1
mov ebx,1
mov eax,4
int 80h

;****addition****
mov ax,'6'
sub ax,'0'
mov bl,'2'
sub bl,'0'
sum:mov eax,ecx
add eax,edx
add eax,'0'
mov[reg],eax
;display sum
mov ecx,sum
mov edx,1
mov ebx,1
mov eax,4
int 80h
********************************************************************************************
****************************************BASIC MATHEMATIC OPERATION**********************************************
section .data
msg db "***  basic mathematical operations ***"
len equ $ -msg
msg1 db 10,13,"sum:"
len1 equ $ -msg1
msg2 db 10,13,"difference:",10
len2 equ $ -msg2
msg3 db 10,13,"product:"
len3 equ $ -msg3
msg4 db 10,13,"quotient:"
len4 equ $ -msg4

section .bss
sum resb 1
diff resb 1
prod resb 1
quot resb 1
section .text
global _start
_start:
;display the string msg
mov ecx,msg
mov edx,len
mov ebx,1
mov eax,4
int 80h

;display the string msg1
mov ecx,msg1
mov edx,len1
mov ebx,1
mov eax,4
int 80h

;****addition****
mov ax,'6'
sub ax,'0'
mov bl,'2'
sub bl,'0'
add al,bl
add ax,'0'
mov[sum],ax
;display sum
mov ecx,sum
mov edx,1
mov ebx,1
mov eax,4
int 80h

;display the string msg1
mov ecx,msg2
mov edx,len2
mov ebx,1
mov eax,4
int 80h

;****subtraction****
mov ax,'6'
sub ax,'0'
mov bl,'2'
sub bl,'0'
sub al,bl
add ax,'0'
mov[diff],ax
;display diff
mov ecx,diff
mov edx,1
mov ebx,1
mov eax,4
int 80h
;display the string msg3
mov ecx,msg3
mov edx,len3
mov ebx,1
mov eax,4
int 80h

;****multiplication****
mov ax,'3'
sub ax,'0'
mov bl,'2'
sub bl,'0'
mul bl
add ax,'0'
mov[prod],ax
;display prod
mov ecx,prod
mov edx,1
mov ebx,1
mov eax,4
int 80h

;display the string msg4
mov ecx,msg4
mov edx,len4
mov ebx,1
mov eax,4
int 80h

;****quotient****
mov ax,'3'
sub ax,'0'
mov bl,'2'
sub bl,'0'
div bl
add ax,'0'
mov[quot],ax
;display quot
mov ecx,quot
mov edx,1
mov ebx,1
mov eax,4
int 80h

***********************************************
Program 1
section .data
msg db "Hello,world!",10
len equ $ -msg
section .text
global _start
_start:
mov ecx,msg ;
mov edx,len
mov eax,4
mov ebx,1
int 80h
mov eax,1
int 80h

Program 2
section .data
msg db "Hello,world!",10
len equ $ -msg
msg1 db "first 80386 program",10
len1 equ $ -msg1
section .text
global _start
_start:
mov ecx,msg
mov edx,len
mov eax,4
mov ebx,1
int 80h
mov ecx,msg1
mov edx,len1
mov eax,4
mov ebx,1
int 80h
mov eax,1
int 80h

Program 3
mection .data
msg db “Zara Ali”,10
len equ $- msg
section .text
global _start
_start:
mov ecx,msg
mov edx,len
mov eax,4
mov ebx,1
int 80h
mov[msg],dword’Nuha’
mov ecx,msg
mov edx,len
mov eax,4
mov ebx,1
int 80h
mov eax,1
int 80h
*****************************************************************************************************************************
%macro writestring 2
mov eax, 4
mov ebx,1
mov ecx,%1
mov edx,%2
int 80h
%endmacro
section .data
msg1 db "hello"
len1 equ $ -msg1
msg2 db "world"
len2 equ $ -msg2
msg3 db"80386"
len3 equ $ -msg3          


;section .bss
; dis_buffer resb 2


section .text
       global _start
  _start:
writestring msg1,len1
writestring msg2,len2
writestring msg3,len3


;exit program
mov eax, 1
mov ebx, 0
int 80h
