expt4
section .data
msg1 db &quot; &quot;
len1 equ $-msg1
section .bss
num resb 1
section .text
global _start:
_start:
mov ecx,10
mov eax,&#39;0&#39;
up : mov [num] ,eax
mov eax,4
mov ebx,1
push ecx
mov ecx,num
mov edx,1
int 80h
mov eax,4 ; code snippet to display msg1
mov ebx,1
mov ecx,msg1
mov edx,len1
int 80h
mov eax,[num]
sub eax,&#39;0&#39;
inc eax
add eax,&#39;0&#39;
pop ecx
loop up
mov eax,1
int 80h
***************************************************
odd even 


section .data
even_msg db &quot;Even Number ! &quot;
len1 equ $-even_msg
odd_msg db &quot;Odd Number ! &quot;
len2 equ $-odd_msg
section .text
global _start
_start:
mov eax,15h
and eax,1
jz even
odd : mov edx,len2
mov ecx,odd_msg
mov ebx,1
mov eax,4
int 80h
jmp exit
even: mov edx,len1
mov ecx,even_msg
mov ebx,1
mov eax,4
int 80h
exit : mov eax,1
int 80h
************************************************
postive and negative 



section .data
pos_msg db &quot;Positive Number ! &quot;
len1 equ $-pos_msg
neg_msg db &quot;Negative Number ! &quot;
len2 equ $-neg_msg
section .text
global _start
_start:
mov eax,12h
rol eax,1
jc neg
mov edx,len1
mov ecx,pos_msg
mov ebx,1
mov eax,4
int 80h
jmp exit
neg: mov edx,len2
mov ecx,neg_msg
mov ebx,1
mov eax,4
int 80h
exit : mov eax,1
int 80h

