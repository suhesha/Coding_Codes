expt4
section .data
msg1 db &quot; &quot;
len1 equ $-msg1
section .bss
num resb 1
section .text
global _start:
_start:
mov ecx,10
mov eax,&#39;0&#39;
up : mov [num] ,eax
mov eax,4
mov ebx,1
push ecx
mov ecx,num
mov edx,1
int 80h
mov eax,4 ; code snippet to display msg1
mov ebx,1
mov ecx,msg1
mov edx,len1
int 80h
mov eax,[num]
sub eax,&#39;0&#39;
inc eax
add eax,&#39;0&#39;
pop ecx
loop up
mov eax,1
int 80h
***************************************************
odd even 


section .data
even_msg db &quot;Even Number ! &quot;
len1 equ $-even_msg
odd_msg db &quot;Odd Number ! &quot;
len2 equ $-odd_msg
section .text
global _start
_start:
mov eax,15h
and eax,1
jz even
odd : mov edx,len2
mov ecx,odd_msg
mov ebx,1
mov eax,4
int 80h
jmp exit
even: mov edx,len1
mov ecx,even_msg
mov ebx,1
mov eax,4
int 80h
exit : mov eax,1
int 80h
************************************************
postive and negative 



section .data
pos_msg db &quot;Positive Number ! &quot;
len1 equ $-pos_msg
neg_msg db &quot;Negative Number ! &quot;
len2 equ $-neg_msg
section .text
global _start
_start:
mov eax,12h
rol eax,1
jc neg
mov edx,len1
mov ecx,pos_msg
mov ebx,1
mov eax,4
int 80h
jmp exit
neg: mov edx,len2
mov ecx,neg_msg
mov ebx,1
mov eax,4
int 80h
exit : mov eax,1
int 80h
******************************************
largest of 3 numbers 

section .data
msg db &quot;The largest number is: &quot;, 10, 13
len equ $- msg
num1 dd 97h
num2 dd 99h
num3 dd 96h
section .bss
largest resb 2
dis_buffer resb 2
section .text
global _start
_start:
mov ecx, [num1]
cmp ecx, [num2]
jg down
mov ecx, [num2]
down: cmp ecx, [num3]
jg nxt
mov ecx, [num3]
nxt: mov [largest], ecx
mov ecx, msg
mov edx, len
mov ebx, 1
mov eax, 4
int 80h
mov bl, [largest]
;HEX to ASCII CONVERSION
mov ecx, 2 ;no of digits
mov edi,dis_buffer
DUP: rol bl,04
mov al,bl
and al,0fh
cmp al,09h
jbe NEXT
add al,07h
NEXT: add al, 30h
mov [edi], al
inc edi
loop DUP
mov ecx, dis_buffer ;display max value on screen
mov edx,2
mov ebx,1
mov eax,4
int 80h
mov eax,1 ;exit programme
mov ebx,0
int 80h
