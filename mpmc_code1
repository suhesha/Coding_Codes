expt4
section .data
msg1 db &quot; &quot;
len1 equ $-msg1
section .bss
num resb 1
section .text
global _start:
_start:
mov ecx,10
mov eax,&#39;0&#39;
up : mov [num] ,eax
mov eax,4
mov ebx,1
push ecx
mov ecx,num
mov edx,1
int 80h
mov eax,4 ; code snippet to display msg1
mov ebx,1
mov ecx,msg1
mov edx,len1
int 80h
mov eax,[num]
sub eax,&#39;0&#39;
inc eax
add eax,&#39;0&#39;
pop ecx
loop up
mov eax,1
int 80h
***************************************************
odd even 


section .data
even_msg db &quot;Even Number ! &quot;
len1 equ $-even_msg
odd_msg db &quot;Odd Number ! &quot;
len2 equ $-odd_msg
section .text
global _start
_start:
mov eax,15h
and eax,1
jz even
odd : mov edx,len2
mov ecx,odd_msg
mov ebx,1
mov eax,4
int 80h
jmp exit
even: mov edx,len1
mov ecx,even_msg
mov ebx,1
mov eax,4
int 80h
exit : mov eax,1
int 80h
************************************************
postive and negative 



section .data
pos_msg db &quot;Positive Number ! &quot;
len1 equ $-pos_msg
neg_msg db &quot;Negative Number ! &quot;
len2 equ $-neg_msg
section .text
global _start
_start:
mov eax,12h
rol eax,1
jc neg
mov edx,len1
mov ecx,pos_msg
mov ebx,1
mov eax,4
int 80h
jmp exit
neg: mov edx,len2
mov ecx,neg_msg
mov ebx,1
mov eax,4
int 80h
exit : mov eax,1
int 80h
******************************************
largest of 3 numbers 

section .data
msg db &quot;The largest number is: &quot;, 10, 13
len equ $- msg
num1 dd 97h
num2 dd 99h
num3 dd 96h
section .bss
largest resb 2
dis_buffer resb 2
section .text
global _start
_start:
mov ecx, [num1]
cmp ecx, [num2]
jg down
mov ecx, [num2]
down: cmp ecx, [num3]
jg nxt
mov ecx, [num3]
nxt: mov [largest], ecx
mov ecx, msg
mov edx, len
mov ebx, 1
mov eax, 4
int 80h
mov bl, [largest]
;HEX to ASCII CONVERSION
mov ecx, 2 ;no of digits
mov edi,dis_buffer
DUP: rol bl,04
mov al,bl
and al,0fh
cmp al,09h
jbe NEXT
add al,07h
NEXT: add al, 30h
mov [edi], al
inc edi
loop DUP
mov ecx, dis_buffer ;display max value on screen
mov edx,2
mov ebx,1
mov eax,4
int 80h
mov eax,1 ;exit programme
mov ebx,0
int 80h


*****************************************************EXPT 1***************************************
section .data ;data segment
msg db &quot;Hello, world!&quot; ;Hello world! string
len equ $-msg ;length of Hello world! string
section .text ;code segment
global _start ;must be declared for linker
_start: ;tell linker entry point
mov edx,len ;message length
mov ecx,msg ;message to write
mov ebx,1 ;file descriptor(stdout)
mov eax,4 ;system call number(sys_write)
int 80h ;call kernel
mov eax,1 ;system call number(sys_exit)
int 80h ;call kernel



section .data ;data segment
msg1 db &quot;Displaying 10 stars :&quot;, 13,10 ;Display 10 stars string
len1 equ $-msg1 ;length of Display 10 stars string
msg2 times 10 db &#39;*&#39; ;times &#39;n&#39; will multiply the string &#39;n&#39; times

section .text ;code segment
global _start ;must be declared for linker
_start: ;tell linker entry point
mov edx,len1 ;message length
mov ecx,msg1 ;message to write
mov ebx,1 ;file descriptor(stdout)
mov eax,4 ;system call number(sys_write)
int 80h ;call kernel
mov edx,10 ;message length
mov ecx,msg2 ;message to write
mov ebx,1 ;file descriptor(stdout)
mov eax,4 ;system call number(sys_write)
int 80h ;call kernel
mov eax,1 ;system call number(sys_exit)
int 80h ;call kernel

****************************************************************EXPT 2*************************************
section .data
msg db &quot;*** Basic Mathematical Operations ***&quot;
len equ $-msg
msg1 db 10,13,&quot;Num1 + Num2 : &quot;
len1 equ $-msg1
msg2 db 10,13,&quot;Num1 - Num2 : &quot;
len2 equ $-msg2
msg3 db 10,13,&quot;Num1 * Num2 : &quot;
len3 equ $-msg3
msg4 db 10,13,&quot;Num1 / Num2 : &quot;
len4 equ $-msg4
section .bss
sum resb 1
section .text
global _start
_start:
mov edx,len
mov ecx,msg
mov ebx,1
mov eax,4
int 80h
mov edx,len1
mov ecx,msg1
mov ebx,1
mov eax,4
int 80h

mov ax,&#39;3&#39;
sub ax,&#39;0&#39;
mov bx,&#39;2&#39;
sub bl,&#39;0&#39;
add al,bl
add ax,&#39;0&#39;
mov [sum],ax
mov ecx,sum
mov edx,1
mov ebx,1
mov eax,4
int 80h
mov edx,len2
mov ecx,msg2
mov ebx,1
mov eax,4
int 80h

mov ax,&#39;3&#39;
sub ax,&#39;0&#39;
mov bx,&#39;2&#39;
sub bl,&#39;0&#39;
sub al,bl
add ax,&#39;0&#39;
mov [sum],ax
mov ecx,sum
mov edx,1
mov ebx,1
mov eax,4
int 80h

mov edx,len3
mov ecx,msg3
mov ebx,1
mov eax,4
int 80h
mov ax,&#39;3&#39;
sub ax,&#39;0&#39;
mov bx,&#39;2&#39;
sub bl,&#39;0&#39;
mul bl
add ax,&#39;0&#39;
mov [sum],ax
mov ecx,sum
mov edx,1
mov ebx,1
mov eax,4
int 80h
mov edx,len4
mov ecx,msg4
mov ebx,1
mov eax,4
int 80h
mov ax,&#39;3&#39;
sub ax,&#39;0&#39;
mov bx,&#39;2&#39;
sub bl,&#39;0&#39;
div bl
add ax,&#39;0&#39;
mov [sum],ax
mov ecx,sum
mov edx,1
mov ebx,1
mov eax,4
int 80h
mov eax,1
int 80h



section .data
msg1 db &quot;Enter a digit : &quot;
len1 equ $-msg1
msg2 db 10,13,&quot;The number entered is : &quot;
len2 equ $-msg2
section .bss
num resb 0
section .text
global _start
_start:
mov eax,4 ;Display msg1
mov ebx,1
mov ecx,msg1
mov edx,len1
int 80h
mov eax,3 ;Accept number from the user
mov ebx,0
mov ecx,num
mov edx,2
int 80h
mov eax,4 ;Display msg2
mov ebx,1
mov ecx,msg2
mov edx,len2
int 80h
mov eax,4 ;Print num
mov ebx,1
mov ecx,num
mov edx,1
int 80h
mov eax,1
int 80h

segment .data
msg1 db &quot;Enter a digit : &quot;
len1 equ $-msg1
msg2 db 10,13,&quot;Please enter a second digit : &quot;
len2 equ $-msg2
msg3 db 10,13,&quot;The sum is : &quot;
len3 equ $-msg3
segment .bss
num1 resb 2 ; num1 is the first number that is entered by the user
num2 resb 2 ; num2 is the second number that is entered by the user
res resb 1 ; res is a variable that stores the result

segment .text
global _start
_start:
mov eax,4 ; Display msg1
mov ebx,1
mov ecx,msg1
mov edx,len1
int 80h
mov eax,3 ; Accept number 1 from the user
mov ebx,0
mov ecx,num1
mov edx,2
int 80h
mov eax,4 ; Display msg2
mov ebx,1
mov ecx,msg2
mov edx,len2
int 80h
mov eax,3 ; Accept number 2 from the user
mov ebx,0
mov ecx,num2
mov edx,2
int 80h
mov eax,4 ;Display msg3
mov ebx,1
mov ecx,msg3
mov edx,len3
int 80h


mov eax,[num1]
sub eax,&#39;0&#39;
mov ebx,[num2]
sub ebx,&#39;0&#39;
add eax,ebx
add eax,&#39;0&#39;
mov [res],eax
mov eax,4 ; Print num
mov ebx,1
mov ecx,res
mov edx,1
int 80h

mov eax,1
int 80h
