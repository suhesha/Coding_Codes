expt4
section .data
msg1 db &quot; &quot;
len1 equ $-msg1
section .bss
num resb 1
section .text
global _start:
_start:
mov ecx,10
mov eax,&#39;0&#39;
up : mov [num] ,eax
mov eax,4
mov ebx,1
push ecx
mov ecx,num
mov edx,1
int 80h
mov eax,4 ; code snippet to display msg1
mov ebx,1
mov ecx,msg1
mov edx,len1
int 80h
mov eax,[num]
sub eax,&#39;0&#39;
inc eax
add eax,&#39;0&#39;
pop ecx
loop up
mov eax,1
int 80h
***************************************************
odd even 


section .data
even_msg db &quot;Even Number ! &quot;
len1 equ $-even_msg
odd_msg db &quot;Odd Number ! &quot;
len2 equ $-odd_msg
section .text
global _start
_start:
mov eax,15h
and eax,1
jz even
odd : mov edx,len2
mov ecx,odd_msg
mov ebx,1
mov eax,4
int 80h
jmp exit
even: mov edx,len1
mov ecx,even_msg
mov ebx,1
mov eax,4
int 80h
exit : mov eax,1
int 80h
************************************************
postive and negative 



section .data
pos_msg db &quot;Positive Number ! &quot;
len1 equ $-pos_msg
neg_msg db &quot;Negative Number ! &quot;
len2 equ $-neg_msg
section .text
global _start
_start:
mov eax,12h
rol eax,1
jc neg
mov edx,len1
mov ecx,pos_msg
mov ebx,1
mov eax,4
int 80h
jmp exit
neg: mov edx,len2
mov ecx,neg_msg
mov ebx,1
mov eax,4
int 80h
exit : mov eax,1
int 80h
******************************************
largest of 3 numbers 

section .data
msg db &quot;The largest number is: &quot;, 10, 13
len equ $- msg
num1 dd 97h
num2 dd 99h
num3 dd 96h
section .bss
largest resb 2
dis_buffer resb 2
section .text
global _start
_start:
mov ecx, [num1]
cmp ecx, [num2]
jg down
mov ecx, [num2]
down: cmp ecx, [num3]
jg nxt
mov ecx, [num3]
nxt: mov [largest], ecx
mov ecx, msg
mov edx, len
mov ebx, 1
mov eax, 4
int 80h
mov bl, [largest]
;HEX to ASCII CONVERSION
mov ecx, 2 ;no of digits
mov edi,dis_buffer
DUP: rol bl,04
mov al,bl
and al,0fh
cmp al,09h
jbe NEXT
add al,07h
NEXT: add al, 30h
mov [edi], al
inc edi
loop DUP
mov ecx, dis_buffer ;display max value on screen
mov edx,2
mov ebx,1
mov eax,4
int 80h
mov eax,1 ;exit programme
mov ebx,0
int 80h


*****************************************************EXPT 1***************************************
section .data ;data segment
msg db &quot;Hello, world!&quot; ;Hello world! string
len equ $-msg ;length of Hello world! string
section .text ;code segment
global _start ;must be declared for linker
_start: ;tell linker entry point
mov edx,len ;message length
mov ecx,msg ;message to write
mov ebx,1 ;file descriptor(stdout)
mov eax,4 ;system call number(sys_write)
int 80h ;call kernel
mov eax,1 ;system call number(sys_exit)
int 80h ;call kernel



section .data ;data segment
msg1 db &quot;Displaying 10 stars :&quot;, 13,10 ;Display 10 stars string
len1 equ $-msg1 ;length of Display 10 stars string
msg2 times 10 db &#39;*&#39; ;times &#39;n&#39; will multiply the string &#39;n&#39; times

section .text ;code segment
global _start ;must be declared for linker
_start: ;tell linker entry point
mov edx,len1 ;message length
mov ecx,msg1 ;message to write
mov ebx,1 ;file descriptor(stdout)
mov eax,4 ;system call number(sys_write)
int 80h ;call kernel
mov edx,10 ;message length
mov ecx,msg2 ;message to write
mov ebx,1 ;file descriptor(stdout)
mov eax,4 ;system call number(sys_write)
int 80h ;call kernel
mov eax,1 ;system call number(sys_exit)
int 80h ;call kernel

****************************************************************EXPT 2*************************************
section .data
msg db &quot;*** Basic Mathematical Operations ***&quot;
len equ $-msg
msg1 db 10,13,&quot;Num1 + Num2 : &quot;
len1 equ $-msg1
msg2 db 10,13,&quot;Num1 - Num2 : &quot;
len2 equ $-msg2
msg3 db 10,13,&quot;Num1 * Num2 : &quot;
len3 equ $-msg3
msg4 db 10,13,&quot;Num1 / Num2 : &quot;
len4 equ $-msg4
section .bss
sum resb 1
section .text
global _start
_start:
mov edx,len
mov ecx,msg
mov ebx,1
mov eax,4
int 80h
mov edx,len1
mov ecx,msg1
mov ebx,1
mov eax,4
int 80h

mov ax,&#39;3&#39;
sub ax,&#39;0&#39;
mov bx,&#39;2&#39;
sub bl,&#39;0&#39;
add al,bl
add ax,&#39;0&#39;
mov [sum],ax
mov ecx,sum
mov edx,1
mov ebx,1
mov eax,4
int 80h
mov edx,len2
mov ecx,msg2
mov ebx,1
mov eax,4
int 80h

mov ax,&#39;3&#39;
sub ax,&#39;0&#39;
mov bx,&#39;2&#39;
sub bl,&#39;0&#39;
sub al,bl
add ax,&#39;0&#39;
mov [sum],ax
mov ecx,sum
mov edx,1
mov ebx,1
mov eax,4
int 80h

mov edx,len3
mov ecx,msg3
mov ebx,1
mov eax,4
int 80h
mov ax,&#39;3&#39;
sub ax,&#39;0&#39;
mov bx,&#39;2&#39;
sub bl,&#39;0&#39;
mul bl
add ax,&#39;0&#39;
mov [sum],ax
mov ecx,sum
mov edx,1
mov ebx,1
mov eax,4
int 80h
mov edx,len4
mov ecx,msg4
mov ebx,1
mov eax,4
int 80h
mov ax,&#39;3&#39;
sub ax,&#39;0&#39;
mov bx,&#39;2&#39;
sub bl,&#39;0&#39;
div bl
add ax,&#39;0&#39;
mov [sum],ax
mov ecx,sum
mov edx,1
mov ebx,1
mov eax,4
int 80h
mov eax,1
int 80h



section .data
msg1 db &quot;Enter a digit : &quot;
len1 equ $-msg1
msg2 db 10,13,&quot;The number entered is : &quot;
len2 equ $-msg2
section .bss
num resb 0
section .text
global _start
_start:
mov eax,4 ;Display msg1
mov ebx,1
mov ecx,msg1
mov edx,len1
int 80h
mov eax,3 ;Accept number from the user
mov ebx,0
mov ecx,num
mov edx,2
int 80h
mov eax,4 ;Display msg2
mov ebx,1
mov ecx,msg2
mov edx,len2
int 80h
mov eax,4 ;Print num
mov ebx,1
mov ecx,num
mov edx,1
int 80h
mov eax,1
int 80h

segment .data
msg1 db &quot;Enter a digit : &quot;
len1 equ $-msg1
msg2 db 10,13,&quot;Please enter a second digit : &quot;
len2 equ $-msg2
msg3 db 10,13,&quot;The sum is : &quot;
len3 equ $-msg3
segment .bss
num1 resb 2 ; num1 is the first number that is entered by the user
num2 resb 2 ; num2 is the second number that is entered by the user
res resb 1 ; res is a variable that stores the result

segment .text
global _start
_start:
mov eax,4 ; Display msg1
mov ebx,1
mov ecx,msg1
mov edx,len1
int 80h
mov eax,3 ; Accept number 1 from the user
mov ebx,0
mov ecx,num1
mov edx,2
int 80h
mov eax,4 ; Display msg2
mov ebx,1
mov ecx,msg2
mov edx,len2
int 80h
mov eax,3 ; Accept number 2 from the user
mov ebx,0
mov ecx,num2
mov edx,2
int 80h
mov eax,4 ;Display msg3
mov ebx,1
mov ecx,msg3
mov edx,len3
int 80h


mov eax,[num1]
sub eax,&#39;0&#39;
mov ebx,[num2]
sub ebx,&#39;0&#39;
add eax,ebx
add eax,&#39;0&#39;
mov [res],eax
mov eax,4 ; Print num
mov ebx,1
mov ecx,res
mov edx,1
int 80h

mov eax,1
int 80h



************************************************************EXPT 5***************************************************************
%macro write 2
mov eax,4
mov ebx,1
mov ecx,%1
mov edx,%2
int 80h
%endmacro
section .data
msg1 db &quot;Kevin Fernandes&quot;,10,13
len1 equ $-msg1
msg2 db &quot;S.E COMP &quot;,10,13
len2 equ $-msg2
msg3 db &quot;MAPUSA&quot;,10,13
len3 equ $-msg3
section .text
global _start
_start:
write msg1,len1
write msg2,len2
write msg3,len3
mov eax,1
mov ebx,0
int 80h

%macro write 2
mov eax,4
mov ebx,1
mov ecx,%1
mov edx,%2
int 80h
%endmacro
%macro read 2
mov eax,3
mov ebx,0
mov ecx,%1
mov edx,%2
int 80h
%endmacro
section .data
msg1 db &quot;Enter a number : &quot;,10,13
msglen1 equ $-msg1
msg2 db 10,13,&quot;Factorial of number in hexadecimal is : &quot;
msglen2 equ $-msg2
newline db 10,13
section .bss
num1 resb 3
num2 resw 1
dispbuff resq 1
section .text
global _start
_start:
write msg1,msglen1
read num1,2
xor eax,eax
xor ebx,ebx
xor ecx,ecx
xor edx,edx
call convert
mov [num2],ebx
write msg2,msglen2
xor eax,eax
xor ebx,ebx
xor ecx,ecx
xor edx,edx
mov bx,[num2]
mov eax,1
call proc_fact
mov ebx,eax
call display

mov eax,1
mov ebx,0
int 80h
convert :
mov esi ,num1
mov edi ,num2
mov cl ,02h
xor eax,eax
xor ebx,ebx
up : rol bl,04h
mov al,[esi]
cmp al,39h
jbe skipc
sub al,07h
skipc : sub al,30h
add bl,al
mov [edi],bl
inc esi
inc edi
loop up
ret
proc_fact:
cmp bl,01
jg xyz
ret
xyz: mul ebx
dec bl
call proc_fact
ret
display :
mov ecx,8
mov edi,dispbuff
again : rol ebx,4
mov al,bl
and al,0fh
cmp al,09h
jbe down
add al,07h
down : add al,30h
mov [edi],al
inc edi
loop again
write dispbuff,8 ;use macros of display
write newline,1
ret

%macro fibonacci 1
mov eax, 0
display
mov eax, 1
display
mov ecx, %1
sub ecx, 2
mov eax, 1
mov ebx, 0
fib: mov edx,eax
add eax,ebx
display
mov ebx,edx
dec ecx
jnz fib
mov ebx,0
mov eax,1
int 80h
%endmacro
%macro display 0
call iprint
push eax
mov eax,0ah
push eax
mov eax,esp
call sprint
pop eax
pop eax
%endmacro
%macro input 0
mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, len1
int 80h
mov eax, 3
mov ebx, 0
mov ecx, num
mov edx, 2
int 80h
%endmacro
%macro string_to_int 0
xor ebx,ebx
next_digit:
movzx eax,byte[esi]
inc esi
sub al, &#39;0&#39;
imul ebx, 10
add ebx,eax

loop next_digit
mov eax,ebx
%endmacro
segment .data
msg1 db 10,13,&quot;enter the number : &quot;
len1 equ $-msg1
segment .bss
num resb 2
section .text
global _start
_start:
input
lea esi, [num]
mov ecx, 2
string_to_int
mov [num],eax
fibonacci [num]
iprint:
push eax
push ecx
push edx
push esi
mov ecx, 0
divideloop:
inc ecx
mov edx, 0
mov esi, 10
idiv esi
add edx, 48
push edx
cmp eax, 0
jnz divideloop
printloop:
dec ecx
mov eax,esp
call sprint
pop eax
cmp ecx, 0
jnz printloop
pop esi
pop edx
pop ecx
pop eax
ret

sprint:
push edx
push ecx
push ebx
push eax
call slen
mov edx,eax
pop eax
mov ecx,eax
mov ebx, 1
mov eax, 4
int 80h
pop ebx
pop ecx
pop edx
ret
slen:
push ebx
mov ebx,eax
nextchar:
cmp byte[eax], 0
jz finished
inc eax
jmp nextchar
finished:
sub eax,ebx
pop ebx
ret
************************************************************************EXPT 6 ************************************************************
%macro write 2
mov eax,4
mov ebx,1
mov ecx,%1
mov edx,%2
int 80h
%endmacro
%macro read 2
mov eax,3
mov ebx,0
mov ecx,%1
mov edx,%2
int 80h
%endmacro
section .data
arrsize equ 7
msg1 db &quot;Enter 7 characters : &quot;,10,13
msglen1 equ $-msg1
msg2 db &quot;Entered characters are : &quot;,10,13
msglen2 equ $-msg2
newline db &#39;&#39;,10,13
space db &#39; &#39;
section .bss
arr resb 7
extr resb 1
section .text
global _start:
_start:
write msg1,msglen1
mov edi,arr
mov ecx,arrsize
input :
push ecx
read edi,1
read extr,1
inc edi
pop ecx
loop input
write newline,1
write msg2,msglen2
mov esi,arr
mov ecx,arrsize
output:
mov [buff],ecx ; push ecx
write esi,1
write space,1
inc esi
mov ecx,[buff] ; pop ecx
loop output
write newline,1
mov eax,1
mov ebx,0
int 80h

%macro write 2
mov eax,4
mov ebx,1
mov ecx,%1
mov edx,%2
int 80h
%endmacro
section .data
msg1 db 10,13,&quot;Before transfer the array contains the elements : &quot;
msglen1 equ $-msg1
msg2 db 10,13,&quot;After transfer the array contains the elements : &quot;
msglen2 equ $-msg2
array db 11h,59h,33h,22h,44h
darr db 00h,00h,00h,00h,00h
newline db &#39;&#39;,10,13
section .bss
counter resb 1
result resb 4
section .text
global _start
_start :
write msg1,msglen1
mov byte[counter],05
mov esi,array
next: mov al,[esi]
push esi
call disp
pop esi
inc esi
dec byte[counter]
jnz next
mov byte[counter],05
mov esi ,array
mov edi ,darr
next2: mov al ,[esi]
mov [edi],al
inc esi
inc edi
dec byte[counter]
jnz next2
write msg2,msglen2
mov byte[counter],05
mov edi,darr
next3:mov al,[edi]
push edi
call disp
pop edi
inc edi
dec byte[counter]
jnz next3
mov eax,1
mov ebx,0
int 80h

;Procedure to display 2 digit numbers
disp : mov bl,al
mov edi,result
mov cx,02
again : rol bl,04
mov al,bl
and al,0fh
cmp al,09
jg down
add al,30h
jmp skip1
down : add al,37h
skip1 : mov [edi],al
inc edi
dec cx
jnz again
write result,2
write newline,2
ret
dec byte[counter]
jnz next3
mov eax,1
mov ebx,0
int 80h

;Procedure to display 2 digit numbers
disp : mov bl,al
mov edi,result
mov cx,02
again : rol bl,04
mov al,bl
and al,0fh
cmp al,09
jg down
add al,30h
jmp skip1
down : add al,37h
skip1 : mov [edi],al
inc edi
dec cx
jnz again
write result,2
write newline,2
ret

%macro write 2
mov eax,4
mov ebx,1
mov ecx,%1
mov edx,%2
int 80h
%endmacro
section .data
msg1 db 10,&quot;The array contains the elements&quot;,10,13
msglen1 equ $-msg1
msg2 db 10,13,&quot;The Sorted Array is : &quot;,10,13
msglen2 equ $-msg2
array db 05h,01h,03h,02h,08h
rem db 00h,00h,00h,00h,00h
newline db 13,10
section .bss
counter resb 1
counter2 resb 1
result resb 4
section .text
global _start
_start:
write msg1,msglen1
mov byte[counter],05
mov esi,array
next: mov al,[esi]
push esi
call disp
pop esi
inc esi
dec byte[counter]
jnz next
mov byte[counter],05
mov esi,array
mov edi,rem
next2:
mov al,[esi]
mov [edi],al
inc esi
inc edi
dec byte[counter]
jnz next2
mov byte[counter],04
next3:
mov esi,rem
mov edi,rem
mov bl,[esi]
inc esi
mov byte[counter2],04
next4:
mov al,bl

mov bl,[esi]
cmp al,bl
jg great
inc esi
inc edi
test:
dec byte[counter2]
jnz next4
dec byte[counter]
jnz next3
write msg2,msglen2
mov byte[counter],05
mov esi,rem
next5 : mov al,[esi]
push esi
call disp
pop esi
inc esi
dec byte[counter]
jnz next5
mov eax,1
mov ebx,0
int 80h
disp:
mov bl,al
mov edi,result
mov cx,02
again:
rol bl,4
mov al,bl
and al,0fh
cmp al,09
jg down
add al,30h
jmp skip1
down: add al,37h
skip1: mov[edi],al
inc edi
dec cx
jnz again
write result,2
write newline,2
ret
great:
mov [edi],bl
inc edi
mov[edi],al
inc esi
mov bl,al
jmp test

%macro display 2
mov edx,%2
mov ecx,%1
mov ebx,1
mov eax,4
int 80h
%endmacro
section .data
msg1 db 10,&quot;The elements in array before sorting&quot;,10
len1 equ $-msg1
msg2 db 10,&quot;The elements in array after sorting&quot;,10
len2 equ $-msg2
array db 50h,15h,45h,20h,10h
newline db 10
section .bss
result resb 2
count resb 1
cnt resb 1
counter resb 1
section .text
global _start
_start: xor eax,eax
mov al,00h
mov [count],al
display msg1,len1
call convert
mov esi,array
mov edi,array
xor eax,eax
mov al,01h
mov [counter],al
up1: inc esi
xor ecx,ecx
mov cl,[counter]
xor eax,eax
mov al,[esi]
up: xor ebx,ebx
mov bl,[edi]
cmp bl,al
ja next
jmp down
next:
inc edi
mov [edi],bl
dec edi
mov [edi],al
dec edi
loop up
down:
inc byte[counter]
mov edi,array
xor ecx,ecx
mov cl,[counter]

sub cl,01h
add edi,ecx
inc byte[count]
cmp byte[count],4 ;Iterate till count == 4
jne up1
display msg2,len2
call convert
mov eax,1
mov ebx,0
int 80h
convert:
xor eax,eax
mov al,05h
mov [cnt],al
mov esi,array
above1:
mov edi,result
xor ecx,ecx
mov cl,02h
mov bl,[esi]
above:
rol bl,04
mov al,bl
and al,0fh
cmp al,09h
jbe below
add al,07h
below:
add al,30h
mov [edi],al
inc edi
loop above
display result,2
display newline,1
inc esi
dec byte[cnt]
cmp byte[cnt],0
jne above1
ret

%macro display 2
mov edx,%2
mov ecx,%1
mov ebx,1
mov eax,4
int 80h
%endmacro
section .data
msg1 db 10,&quot;The elements in array before sorting&quot;
len1 equ $-msg1
msg2 db 10,13,&quot;The elements in array after sorting&quot;
len2 equ $-msg2
array db 45h,25h,35h,15h,10h
newline db 10
section .bss
result resb 2
count resb 1
cnt resb 1
section .text
global _start
_start: xor eax,eax
mov al,00h
mov [count],al
display msg1,len1
call convert
call selection_sort
display msg2,len2
call convert
mov eax,1
mov ebx,0
int 80h
selection_sort:
mov esi,array
up1: xor ecx,ecx
mov cl,04h
sub cl,[count]
mov edi,esi
xor eax,eax
mov al,[esi]
up:
inc edi
xor ebx,ebx
mov bl,[edi]


cmp al,bl ;compare al and bl
ja next ;If al&gt;bl go to lable &#39;next&#39;
jmp next1 ;jump to lable next1
next: mov al,[edi]
next1: loop up
mov edi,array
dec edi
till:
inc edi
cmp [edi],al
jne till
xor ebx,ebx
mov bl,[esi]
mov [esi],al
mov [edi],bl
inc esi
inc byte[count]
cmp byte[count],4
jne up1
ret
convert:
xor eax,eax
mov al,05h
mov [cnt],al
mov esi,array
above1: mov edi,result
xor ecx,ecx
mov cl,02h
mov bl,[esi]
above: rol bl,04
mov al,bl
and al,0fh
cmp al,09h
jbe below
add al,07h
below:
add al,30h
mov [edi],al
inc edi
loop above
display newline,1
display result,2

inc esi
dec byte[cnt]
cmp byte[cnt],0
jne above1
ret
